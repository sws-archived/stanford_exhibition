<?php
/**
 * File
 * This module overrides the functionality found at /events/upcoming-events
 */

/**
 * Implements hook_boot().
 */
function stanford_exhibition_events_takeover_init() {

  /**
   * Hard programmed redirect for redirecting exhibition-views to
   * events set of views.
   * @var [type]
   */

  $boolean = stanford_exhibition_events_takeover_is_page_events_calendar();

  $mini = isset($_REQUEST['mini']);
  $arg1 = arg(1);
  $arg2 = ($mini) ? check_plain($_REQUEST['mini']) : arg(2);

  if ($boolean) {
    $url = 'events/' . $arg1 . '/' . $arg2;
    drupal_goto($url);
  }

  if ($mini && arg(0) == "events" && arg(1) == "month") {
    drupal_goto('events/month/' . check_plain($_REQUEST['mini']));
  }

}

/**
 * Returns wether or not the url is an exhibitions-events url
 * @return [type] [description]
 */
function stanford_exhibition_events_takeover_is_page_events_calendar($prefix = "exhibitions-events") {
  $arg0 = arg(0);
  $arg1 = arg(1);
  $arg2 = arg(2);

  // Check for prefix
  if ($arg0 !== $prefix) {
    return FALSE;
  }

  // Check for day keyword
  if ($arg1 !== "day" && $arg1 !== "month") {
    return FALSE;
  }

  // Check for a date
  $time = strtotime($arg2);
  if (is_int($time)) {
    return TRUE;
  }
}


/**
 * hook_field_views_data_alter
 * hook_field_views_data_views_data_alter
 * hook_views_data_alter
 *
 * hook_views_pre_execute
 * hook_views_query_alter
 *
 */

/**
 * Alter all the things! Change the events views and exhibition views to work
 * with dates in the url as well as alter their default functionality.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function stanford_exhibition_events_takeover_views_pre_build(&$view) {

  // Add some helper JS.
  $settings = array(
    'seet' => array(
      'arg0' => arg(0),
      'arg1' => arg(1)
    )
  );
  drupal_add_js($settings, 'setting');


  $args = _seset_check_args();
  if($args) {
    takeover_pre_build_with_args($view);
  }
  else {
    takeover_pre_build_without_args($view);
  }

}

/**
 * Sort of like a large switch statement.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function takeover_pre_build_with_args(&$view) {

  if ($view->name == "stanford_events_views" && $view->current_display == 'page') {
    takeover_stanford_events_views_page($view);
  }

  if ($view->name == "stanford_exhibitions" && $view->current_display == 'current_exhibitions_block') {
    takeover_stanford_exhibitions_current_exhibitions_block($view);
  }

  if ($view->name == "stanford_exhibitions" && $view->current_display == 'upcoming_exhibitions_block') {
    takeover_stanford_exhibitions_upcoming_exhibitions_block($view);
  }

}

/**
 * Sort of like a large switch statement.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function takeover_pre_build_without_args(&$view) {

  if ($view->name == "stanford_events_exhibitions_calendar" && $view->current_display == 'events_exhibitions_calendar_block') {
    takeover_stanford_exhibitions_events_exhibitions_calendar_block($view);
  }

}


/**
 * Alter the dates supplied to the filters for the events page view based on
 * params we get from the URL.
 * @param $view
 */
function takeover_stanford_events_views_page(&$view) {

  $args = _seset_get_args();
  $minmax = _seset_get_minmax($args);

  $view->filter['field_stanford_event_datetime_value']->operator = "between";
  $view->filter['field_stanford_event_datetime_value']->value['min'] = $minmax['min'];
  $view->filter['field_stanford_event_datetime_value']->value['max'] = $minmax['max'];

  $view->filter['field_stanford_event_datetime_value']->options['operator'] = 'between';
  $view->filter['field_stanford_event_datetime_value']->options['value']['max'] = $minmax['max'];
  $view->filter['field_stanford_event_datetime_value']->options['value']['min'] = $minmax['min'];

  $view->filter['field_stanford_event_datetime_value']->format = 'Y-m-d';

}

/**
 *
 * @param $view
 */
function takeover_stanford_exhibitions_current_exhibitions_block(&$view) {

  $args = _seset_get_args();
  $minmax = _seset_get_minmax($args);

  // Disable replacing the current exhibitions block with the upcoming ones.
  // $view->empty = array();
  // $view->display_handler->options['empty'] = array();
  // $view->display_handler->display->dispaly_options['empty'] = array();

  $view->filter['field_s_exh_dates_duration_value']->value['min'] = $minmax['min'];
  $view->filter['field_s_exh_dates_duration_value']->value['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value']->options['value']['min'] = $minmax['min'];
  $view->filter['field_s_exh_dates_duration_value']->options['value']['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value']->options['default_date'] = '';

  $view->filter['field_s_exh_dates_duration_value2']->value['max'] = $minmax['max'];
  $view->filter['field_s_exh_dates_duration_value2']->value['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value2']->options['value']['max'] = $minmax['max'];
  $view->filter['field_s_exh_dates_duration_value2']->options['value']['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value2']->options['default_date'] = '';

}

/**
 * Alter the filters on the exhibitions block to match the params in the url.
 * @param $view
 */
function takeover_stanford_exhibitions_upcoming_exhibitions_block(&$view) {

  $args = _seset_get_args();
  $minmax = _seset_get_minmax($args);
  $month_name = date("F", mktime(0, 0, 0, $args['month'], 10));

  $view->header['area_text_custom']->options['content'] = "<h2>" . $month_name . " Exhibitions</h2>";

  $view->filter['field_s_exh_dates_duration_value']->value['value'] = $minmax['min'];
  $view->filter['field_s_exh_dates_duration_value']->value['min'] = null;
  $view->filter['field_s_exh_dates_duration_value']->value['max'] = null;
  $view->filter['field_s_exh_dates_duration_value']->value['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value']->options['value']['value'] = $minmax['min'];
  $view->filter['field_s_exh_dates_duration_value']->options['value']['min'] = null;
  $view->filter['field_s_exh_dates_duration_value']->options['value']['max'] = null;
  $view->filter['field_s_exh_dates_duration_value']->options['value']['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value']->options['default_date'] = '';

  $view->filter['field_s_exh_dates_duration_value2'] = clone($view->filter['field_s_exh_dates_duration_value']);
  $view->filter['field_s_exh_dates_duration_value2']->operator = "<=";
  $view->filter['field_s_exh_dates_duration_value2']->value['value'] = $minmax['max'];
  $view->filter['field_s_exh_dates_duration_value2']->value['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value2']->options['value']['value'] = $minmax['max'];
  $view->filter['field_s_exh_dates_duration_value2']->options['value']['type'] = 'date';
  $view->filter['field_s_exh_dates_duration_value2']->options['default_date'] = '';
  $view->filter['field_s_exh_dates_duration_value2']->options['operator'] = "<=";

}

/**
 * If we are on a calendar page we would like this mini calendar to match.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function takeover_stanford_exhibitions_events_exhibitions_calendar_block(&$view) {

  // Check to see if we are on an events page
  $on_cal_page = stanford_exhibition_events_takeover_is_page_events_calendar('events');

  // No events then just return
  if (!$on_cal_page) {
    return;
  }

  // We are on events page get date from URL.
  $new_date_arg = arg(2);

  // Could have day or not so adjust for that.
  if (strlen($new_date_arg) >= 8) {
    $new_date_arg = substr($new_date_arg, 0, -3);
  }

  // Set the arguments so when the view is built it gets built with the right
  // date that is being viewed.
  $view->set_arguments(array($new_date_arg));

}



/**
 * Change titles of the views on the upcoming events page when using the
 * mini calendar to control the dates.
 * @param  [type] $view [description]
 * @return [type]       [description]
 */
function stanford_exhibition_events_takeover_views_post_render(&$view) {

  if (!_seset_check_args()) {
    return;
  }

  $args = _seset_get_args();
  $month_name = date("F", mktime(0, 0, 0, $args['month'], 10));

  if ($view->name == "stanford_events_views" && $view->current_display == "page") {
    $view->set_title($month_name . ' Events');
  }

}

/**
 * [stanford_exhibition_events_takeover_views_pre_view description]
 * @param  [type] $view       [description]
 * @param  [type] $display_id [description]
 * @param  [type] $args       [description]
 * @return [type]             [description]
 */
function stanford_exhibition_events_takeover_views_pre_view(&$view, &$display_id, $args) {

  if ($view->name == "stanford_events_calendar" && $display_id == "page_month") {
    takeover_pre_view_stanford_events_calendar_page_month($view, $display_id, $args);
  }

  if ($view->name == "stanford_events_calendar" && $display_id == "page_3") {
    takeover_pre_view_stanford_events_calendar_page_day($view, $display_id, $args);
  }

}

/**
 * [takeover_pre_view_stanford_events_calendar_page_month description]
 * @param  [type] $view       [description]
 * @param  [type] $display_id [description]
 * @param  [type] $args       [description]
 * @return [type]             [description]
 */
function takeover_pre_view_stanford_events_calendar_page_month(&$view, &$display_id, $args) {
    // $footer = views_embed_view('stanford_exhibitions_calendar', 'page_month', $args[0]);

    // Attach the exhibitions page_month view display to this as a footer attachement.
    // Start by getting and setting the view.
    // -------------------------------------------------------------------------
    $attachment = views_get_view('stanford_exhibitions_calendar');
    $attachment->set_arguments($args);
    $attachment->set_display('page_month');

    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => TRUE,
      'content' => '<h2 class="title" >Exhibitions</h2>',
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $attachment->display_handler->set_option('header', array('text' => $options));
    $footer = $attachment->render();

    // -------------------------------------------------------------------------

    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => FALSE,
      'content' => $footer,
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $view->display_handler->set_option('footer', array('text' => $options));
}

/**
 * [takeover_pre_view_stanford_events_calendar_page_month description]
 * @param  [type] $view       [description]
 * @param  [type] $display_id [description]
 * @param  [type] $args       [description]
 * @return [type]             [description]
 */
function takeover_pre_view_stanford_events_calendar_page_day(&$view, &$display_id, $args) {
    // $footer = views_embed_view('stanford_exhibitions_calendar', 'page_month', $args[0]);

    // Attach the exhibitions page_month view display to this as a footer attachement.
    // Start by getting and setting the view.
    // -------------------------------------------------------------------------
    $attachment = views_get_view('stanford_exhibitions_calendar');
    $attachment->set_arguments($args);
    $attachment->set_display('page_3');

    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => 1,
      'content' => '<h2 class="title" >Exhibitions</h2>',
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $attachment->display_handler->set_option('header', array('text' => $options));
    $footer = $attachment->render();

    // -------------------------------------------------------------------------

    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => 1,
      'content' => $footer,
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $view->display_handler->set_option('footer', array('text' => $options));

}

/**
 * Implements hook_theme_registry_alter().
 */
function stanford_exhibition_events_takeover_theme_registry_alter(&$theme_registry) {

  // Add our own preprocess functions so we can override the output...

  // Cal mini for the numbers
  array_unshift($theme_registry['calendar_mini']['preprocess functions'], 'stanford_exhibition_events_takeover_preprocess_calendar_mini');
  array_unshift($theme_registry['calendar_mini']['process functions'], 'stanford_exhibition_events_takeover_process_calendar_mini');

  // date_views_pager for the mini cal nav
  array_unshift($theme_registry['date_views_pager']['preprocess functions'], 'stanford_exhibition_events_takeover_preprocess_date_views_pager');

}

/**
 * [stanford_exhibition_events_takeover_preprocess_calendar_mini description]
 * @return [type] [description]
 */
function stanford_exhibition_events_takeover_preprocess_calendar_mini(&$vars) {}

/**
 * [stanford_exhibition_events_takeover_process_calendar_mini description]
 * @return [type] [description]
 */
function stanford_exhibition_events_takeover_process_calendar_mini(&$vars) {}

/**
 * [stanford_exhibition_events_takeover_preprocess_date_views_pager description]
 * @param  [type] $vars [description]
 * @return [type]       [description]
 */
function stanford_exhibition_events_takeover_preprocess_date_views_pager(&$vars) {
  //dpm($vars);

    $view = $vars['plugin']->view;

    // Only modify the exhibitions calendar.
    if ($view->name !== "stanford_events_exhibitions_calendar" || $view->current_display !== "events_exhibitions_calendar_block") {
      return;
    }

    $date_info = $view->date_info;
    $min_date = $date_info->min_date;
    $granularity = !empty($date_info->granularity) ? $date_info->granularity : 'month';

    $prev_date = clone($min_date);
    date_modify($prev_date, '-1 ' . $granularity);
    $next_date = clone($min_date);
    date_modify($next_date, '+1 ' . $granularity);

    $format = array('year' => 'Y', 'month' => 'Y-m', 'day' => 'Y-m-d');
    $next_arg = date_format($next_date, $format[$granularity]);
    $prev_arg = date_format($prev_date, $format[$granularity]);

    $new_view = views_get_view('stanford_events_calendar');
    $new_view->set_arguments($view->args);
    $new_view->date_info = $view->date_info;


    // Change the links
    $vars['next_url'] = date_pager_url($new_view, NULL, $next_arg);
    $vars['prev_url'] = date_pager_url($new_view, NULL, $prev_arg);

    // Change the block title.
     $link = FALSE;
    // Month navigation titles are used as links in the block view.
    if (!empty($date_info->mini) && $granularity == 'month') {
      $link = TRUE;
    }
    $params = array(
    'granularity' => $granularity,
    'view' => $new_view,
    'link' => $link,
    );
    $nav_title = theme('date_nav_title', $params);
    $vars['nav_title'] = $nav_title;

}

/**
 * Make some layout tweaks.
 * @param  [type] $context [description]
 * @return [type]          [description]
 */
function stanford_exhibition_events_takeover_context_load_alter(&$context) {

  // Swap out the events calendar block for the exhibitions & events calendar
  // block.

  if (
    ($context->name === 'events_calendars' || $context->name === "events_upcoming")
     && isset($context->reactions['block'])
     ) {

    // Remove original events block.
    unset ($context->reactions['block']['blocks']['views-934c9b9d8d2d2f2b37f050dcd3bba83c']);

    // Place the exhibitions and events one in its place
    $context->reactions['block']['blocks']['views-008bead96b0bb35fa2fe6055a540af13'] = array(
      'module' => 'views',
      'delta' => '008bead96b0bb35fa2fe6055a540af13',
      'region' => 'sidebar_second',
      'weight' => '-10',
    );
  }
}




// /////////////////////////////////////////////////////////////////////////////
// HELPERS
// /////////////////////////////////////////////////////////////////////////////

/**
 * Gets the args from the URL.
 * @return array|bool
 */
function _seset_get_args(){

  $args = &drupal_static(__FUNCTION__);
  if (count($args)) {
    return $args;
  }

  if (!_seset_check_args()) {
    return array('year' => date("Y"), 'month' => date('m'));
  }

  $explodey = explode("-", $_REQUEST['mini']);
  $args['year'] = (is_numeric($explodey[0])) ? $explodey[0] : date("Y");
  $args['month'] = (is_numeric($explodey[1])) ? $explodey[1] : date("m");

  return $args;
}

/**
 * Checks for the required url param. Returns true if present.
 * @return bool
 */
function _seset_check_args() {
  if (isset($_REQUEST['mini'])) {
    return true;
  }
  return false;
}

/**
 * Returns the current month and next month as min & max dates.
 * @param $args
 * @return array
 */
function _seset_get_minmax($args) {
  $minT = mktime(0, 0, 0, $args['month'], 1, $args['year']);
  $min = date('Y-m-d', $minT);

  $maxD = new DateTime(date('Y-m-d', $minT));
  $maxD->modify('last day of this month');
  $max = $maxD->format('Y-m-d');

  return array('min' => $min, 'max' => $max);
}
